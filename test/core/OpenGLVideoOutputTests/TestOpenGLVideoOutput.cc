#include <gtest/gtest.h>

#include "TestUtils.h"
#include "CoreTestMocksAndWrappers.h"

#include <array>
#include <cstdlib>
#include <memory>
#include <optional>
#include <variant>

#include "MemoryController.h"
#include "OpenGLVideoOutput.h"
#include "RAM.h"
#include "SystemConstants.h"
#include "VideoOutputInterface.h"

using namespace std; 
using namespace gbxcore::constants;
using namespace gbxcore::interfaces;
using namespace gbxcore::memory;
using namespace gbxcore::video;

// GLFW/OpenGL test doubles
bool glfwInitialized;

struct GLFWwindow
{
    int value;
};
GLFWwindow window;

typedef uint32_t GLbitfield;
typedef uint8_t  GLboolean;
typedef int8_t   GLbyte;
typedef float    GLclampf;
typedef uint32_t GLenum;
typedef float    GLfloat;
typedef int32_t  GLint;
typedef int16_t  GLshort;
typedef int32_t  GLsizei;
typedef uint8_t  GLubyte;
typedef uint32_t GLuint;
typedef uint16_t GLushort;
typedef void     GLvoid;

int glfwInit(void)
{
    glfwInitialized = true;
    return 1;
}

void glfwWindowHint(int, int)
{}

GLFWwindow* glfwCreateWindow(int, int, const char*, GLFWmonitor*, GLFWwindow*)
{
    return reinterpret_cast<GLFWwindow*>(&window);
}

void glfwTerminate(void)
{}

void glfwMakeContextCurrent(GLFWwindow*)
{}

void glfwSetWindowSize(GLFWwindow*, int, int)
{}

void glfwSwapInterval(int)

{}
void glfwSwapBuffers(GLFWwindow*)
{}

void glfwPollEvents(void)
{}

int glfwWindowShouldClose(GLFWwindow*)
{
    return 0;
}

void glViewport (GLint, GLint, GLsizei, GLsizei)
{}

void glMatrixMode (GLenum)
{}

void glLoadIdentity (void)
{}

void glOrtho (GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble)
{}

void glBindTexture (GLenum, GLuint)
{}

void glGenTextures (GLsizei, GLuint*)
{}

void glTexImage2D (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)
{}

void glTexParameteri (GLenum, GLenum, GLint)
{}

void glBegin (GLenum)
{}

void glDisable(GLenum)
{}

void glEnable (GLenum)
{}

void glEnd (void)
{}

void glTexCoord2f (GLfloat, GLfloat)
{}

void glVertex3f (GLfloat, GLfloat, GLfloat)
{}

// Wrappers
class OpenGLVideoOutputWrapper : public OpenGLVideoOutput
{
public:
    OpenGLVideoOutputWrapper(gbxcore::memory::RAM* vram)
        : OpenGLVideoOutput(vram)
    {}

    size_t BackgroundAndWindowTileSetBase()
    {
        return _backgroundAndWindowTileSetBase;
    }
    
    size_t BackgroundTileMapBase()
    {
        return _backgroundTileMapBase;
    }

    gbxcore::interfaces::RGBColor* GBXFramePixels()
    {
        return _gbxFramePixels;
    }

    virtual ~OpenGLVideoOutputWrapper() = default;
};

TEST(CoreTests_OpenGLVideoOutput, ConstructVideoOutput) 
{
    // Initialize Test Checks
    glfwInitialized = false;

    auto userVideoRAM = make_unique<RAM>(DMGBCVideoRAMPhysicalSize);
    OpenGLVideoOutput output(userVideoRAM.get());
}

TEST(CoreTests_OpenGLVideoOutput, TestSetBackgroundBaseAddress) 
{
    auto userVideoRAM = make_unique<RAM>(DMGBCVideoRAMPhysicalSize);
    OpenGLVideoOutputWrapper output(userVideoRAM.get());
    output.Initialize();

    // Prepare Video Output
    output.SetBackgroundAndWindowTileSetBaseAddress(0x8000);
    output.SetBackgroundTileMapBaseAddress(0x9800);

    // Expect lower base address
    EXPECT_EQ(0x0000llu, output.BackgroundAndWindowTileSetBase());
    EXPECT_EQ(0x1800llu, output.BackgroundTileMapBase());
}

TEST(CoreTests_OpenGLVideoOutput, TestSetBackgroundBaseAddress2) 
{
    auto userVideoRAM = make_unique<RAM>(DMGBCVideoRAMPhysicalSize);
    OpenGLVideoOutputWrapper output(userVideoRAM.get());
    output.Initialize();

    // Prepare Video Output
    output.SetBackgroundAndWindowTileSetBaseAddress(0x8800);
    output.SetBackgroundTileMapBaseAddress(0x9C00);

    // Expect lower base address
    EXPECT_EQ(0x0800llu, output.BackgroundAndWindowTileSetBase());
    EXPECT_EQ(0x1C00llu, output.BackgroundTileMapBase());
}

TEST(CoreTests_OpenGLVideoOutput, TestSetBackgroundSetBackgroundTiles) 
{
    gbxcore::interfaces::RGBColor c0 = {15, 56, 15};
    gbxcore::interfaces::RGBColor c1 = {48, 98, 48};
    gbxcore::interfaces::RGBColor c2 = {139, 172, 15};
    gbxcore::interfaces::RGBColor c3 = {155, 188, 15};

    uint8_t tile[] = {0x7E, 0xFF, 0x83, 0x81, 0x85, 0x81, 0x89, 0x83, 0x93, 0x85, 0xA5, 0x8B, 0xC9, 0x97, 0x7E, 0xFF, // Tile 1
                      0x00, 0x55, 0x00, 0xAA, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x55, 0x00, 0xAA, 0x00, 0x55, 0x00, 0xAA}; // Tile 2


    gbxcore::interfaces::RGBColor verificationTile[] = {c1, c0, c0, c0, c0, c0, c0, c1,
                                                        c0, c3, c3, c3, c3, c3, c2, c0,
                                                        c0, c3, c3, c3, c3, c2, c3, c0,
                                                        c0, c3, c3, c3, c2, c3, c1, c0,
                                                        c0, c3, c3, c2, c3, c1, c2, c0,
                                                        c0, c3, c2, c3, c1, c2, c1, c0,
                                                        c0, c2, c3, c1, c2, c1, c1, c0,
                                                        c1, c0, c0, c0, c0, c0, c0, c1};

    gbxcore::interfaces::RGBColor verificationTile2[] ={c3, c1, c3, c1, c3, c1, c3, c1,
                                                        c1, c3, c1, c3, c1, c3, c1, c3,
                                                        c3, c1, c3, c1, c3, c1, c3, c1,
                                                        c1, c3, c1, c3, c1, c3, c1, c3,
                                                        c3, c1, c3, c1, c3, c1, c3, c1,
                                                        c1, c3, c1, c3, c1, c3, c1, c3,
                                                        c3, c1, c3, c1, c3, c1, c3, c1,
                                                        c1, c3, c1, c3, c1, c3, c1, c3};

    // The background is made of 32x32 tiles, where only where only 20 x 18 are visible at screen at any time.
    uint8_t backgroundMap[] = {0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
                               0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    auto userVideoRAM = make_unique<RAM>(DMGBCVideoRAMPhysicalSize);
    userVideoRAM->Load(make_shared<uint8_t*>(tile), 32, 0);
    userVideoRAM->Load(make_shared<uint8_t*>(backgroundMap), 1024, 0x1800);
    OpenGLVideoOutputWrapper output(userVideoRAM.get());
    output.Initialize();
    
    // Prepare Video Output
    output.SetBackgroundAndWindowTileSetBaseAddress(0x8000);
    output.SetBackgroundTileMapBaseAddress(0x9800);

    // Expect lower base address
    EXPECT_EQ(0x0000llu, output.BackgroundAndWindowTileSetBase());
    EXPECT_EQ(0x1800llu, output.BackgroundTileMapBase());

    // Render
    output.Render();

    // Check buffer
    
    for (auto i = 0llu; i < 2; ++i)//gbxcore::constants::ScreenHeight/8; ++i)
        for (auto j = 0llu; j < 1; ++j)//gbxcore::constants::DMGBCScreenWidth/8; ++j)
        {
            // i: lines
            // j: column
            auto pixelCounter = i * 8 + 
                                j * gbxcore::constants::DMGBCMaxBackgroundHorizontalTileCount * 8;
            
            for (auto k = 0; k < 8; ++k)
            {
                for (auto l = 0; l < 8; ++l)
                {
                    cout << "L : " << l << " K: " << k << " Pixel Counter: " << pixelCounter <<'\n';
                    cout << " R: " << static_cast<size_t>(output.GBXFramePixels()[pixelCounter].Red) << 
                            " G: " << static_cast<size_t>(output.GBXFramePixels()[pixelCounter].Green) << 
                            " B: " << static_cast<size_t>(output.GBXFramePixels()[pixelCounter].Blue) << '\n';

                    if (i == 0)
                    {
                        EXPECT_EQ(verificationTile[l + k*8].Red, output.GBXFramePixels()[pixelCounter].Red);
                        EXPECT_EQ(verificationTile[l + k*8].Green, output.GBXFramePixels()[pixelCounter].Green);
                        EXPECT_EQ(verificationTile[l + k*8].Blue, output.GBXFramePixels()[pixelCounter].Blue);
                    }
                    else
                    {
                        EXPECT_EQ(verificationTile2[l + k*8].Red, output.GBXFramePixels()[pixelCounter].Red);
                        EXPECT_EQ(verificationTile2[l + k*8].Green, output.GBXFramePixels()[pixelCounter].Green);
                        EXPECT_EQ(verificationTile2[l + k*8].Blue, output.GBXFramePixels()[pixelCounter].Blue);
                    }
                    pixelCounter++;
                }
                pixelCounter += (gbxcore::constants::DMGBCMaxBackgroundHorizontalTileCount - 1)* 8;
            }
        }
}